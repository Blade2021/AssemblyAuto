#include <Keypad.h>
#include <LiquidCrystal.h>
#include <EEPROM.h>


const int NextButton = 26;
const int SaveButton = 30;
const int UpButton = 32;
const int DownButton = 28;
const int ToggleButton = 40;
const int Led1 = 46;
const int Led2 = 44;
const int Led3 = 42; //42
const int Led4 = 8; //8
const int Led5 = 7; //7
const int Sensor = 10;
const int SensorB = 6;
const int ErrorLed = 38;

const int Relay1 = 15;
const int Relay2 = 16;
const int Relay3 = 17;
const int Relay4 = 18;
const int Relay5 = 19;

int rswitch = 0;
int SOverride = 1;
char StateArray[] = {0, 0, 0, 0, 0, 0}; //Include extra 0 for the NULL END

int BNextLogic = 0;
int BUpLogic = 0;
int BDownLogic = 0;
int ToggleLogic = 0;
int SaveButtonTrigger = 0;
int x = 0;
int a = 1;
int b = 1;
int j = 0;
char arraya [] = {0, 1, 2, 3, 0};
int SensorLogic = 0;
int Bcheck = 0;
int Active = 0;

int passcode = 7777;
int SerialCount = 0;



unsigned long previousTimer = 0;  //Previous Time for MAIN TIMER
unsigned long previousTimer2 = 0;
unsigned int y[] = {600, 600, 600, 600, 600, 300};  // Time ARRAY for MAIN TIMER


unsigned long buttonPreviousTime = 0;  //Previous Time for Button Timer

int buttonWait = 200;  //Button wait Variable
unsigned long preLCDClear = 0;
int LCDClearTime = 3000;

LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {53, 51, 49, 47}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {45, 43, 41, 39};
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
int pos=15;
boolean SenCheck = LOW;

void setup() {
  pinMode(NextButton, INPUT);
  pinMode(SaveButton, INPUT);
  pinMode(UpButton, INPUT);
  pinMode(DownButton, INPUT);
  pinMode(ToggleLogic, INPUT);
  pinMode(Sensor, INPUT_PULLUP);
  pinMode(SensorB, INPUT_PULLUP);
  pinMode(Led1, OUTPUT);
  pinMode(Led2, OUTPUT);
  pinMode(Led3, OUTPUT);
  pinMode(Led4, OUTPUT);
  pinMode(Led5, OUTPUT);
  pinMode(Relay1, OUTPUT);
  pinMode(Relay2, OUTPUT);
  pinMode(Relay3, OUTPUT);
  pinMode(Relay4, OUTPUT);
  pinMode(Relay5, OUTPUT);
  pinMode(ErrorLed, OUTPUT);
  Serial.begin(9600);
  Serial.println("Starting...");
  attachInterrupt(digitalPinToInterrupt(38), savetrigger, CHANGE);
  lcd.begin(20,4);
  lcd.setCursor(0,0);
  lcd.print("Run Time: ");
  lcd.setCursor(2,1);
  lcd.print("*** BOOTING ***");
  lcd.setCursor(0,2);
  lcd.print("Time:");
  for(int k = 0; k < 5; k++){
    int ytemp = 0;
    ytemp = EEPROM.read(k);
    y[k] = ytemp * 10;
    Serial.print("EEPROM[");
    Serial.print(k);
    Serial.print("]: ");
    Serial.println(y[k]);
    delay(100);
  }
  Serial.println("********** System Variables ***********");
  Serial.print("Button Wait Time: ");
  Serial.println(buttonWait);
  Serial.print("LCD Clear Time: ");
  Serial.println(LCDClearTime);
  Serial.print("LCD Default POS: ");
  Serial.println(pos);
  Serial.print("Override Passcode: ");
  Serial.println(passcode);
  Serial.println();
}

void loop() {
  lcdClear();
  lcd.setCursor(10,0);
  lcd.print(millis() / 1000);
  unsigned long currentTime = millis();
  while (Serial.available() > 0){
    lcd.setCursor(SerialCount,3);
    lcd.write(Serial.read());
    SerialCount++;
    LCDClearTime = currentTime;
  }
  SerialCount = 0;
  if (SOverride == 0 || SOverride == 1){
    if (SOverride == 0){
    for (int indx = 0; indx < 7; indx++){
      StateArray[indx] = 0;
      Serial.print("Relay status INDEX: ");
      Serial.print(indx);
      Serial.println(" reset.");
    }
    SOverride = 1;
    }
    BNextLogic = digitalRead(NextButton);
    if ((BNextLogic == HIGH) && (currentTime - buttonPreviousTime >= buttonWait)){
      buttonPreviousTime = currentTime;
      x++;
      if (x >= 5){
        x = 0;
        Serial.print("Time VAR: ");
        Serial.print(x+1);
        Serial.print(" selected. | ");
        Serial.println(y[x]);
        }
      else {
      Serial.print("Time VAR: ");
      Serial.print(x+1);
      Serial.print(" selected. | ");
      Serial.println(y[x]);
      }
  }
  BUpLogic = digitalRead(UpButton);
  if ((BUpLogic == HIGH) && (currentTime - buttonPreviousTime >= buttonWait)){
    y[x] = y[x]+100;
    buttonPreviousTime = currentTime;
    Serial.print("TimeVar ");
    Serial.print(x+1);
    Serial.print(" is now: ");
    Serial.println(y[x]);
  }
  BDownLogic = digitalRead(DownButton);
  if ((BDownLogic == HIGH) && (currentTime - buttonPreviousTime >= buttonWait)){
    y[x] = y[x]-100;
    buttonPreviousTime = currentTime;
    Serial.print("TimeVar ");
    Serial.print(x+1);
    Serial.print(" is now: ");
    Serial.println(y[x]);
  }
  SaveButtonTrigger = digitalRead(SaveButton);
  if ((SaveButtonTrigger == HIGH) && (currentTime - buttonPreviousTime >= buttonWait)){
    buttonPreviousTime = currentTime;
    if (SOverride == 0){
      Serial.print("TimeVar ");
      Serial.print(x+1);
      Serial.println(" saved.");
      savetrigger(x);
    }
  }
  lcd.setCursor(0,2);
  lcd.print("Time:");
  ToggleLogic = digitalRead(ToggleButton);
  SensorLogic = digitalRead(Sensor);
  if ((SensorLogic == LOW) && (ToggleLogic == HIGH)){
    Active=1;
  }
  if ((SensorLogic == HIGH) || (ToggleLogic == LOW)){
      Active=0;
  }
  if ((a>=1) && (Active==1)){
    digitalWrite(ErrorLed, LOW);
    if (a==1){
      setLED(Led1);
    }
      if ((a==1) && (currentTime - previousTimer >= y[0])){
        previousTimer = currentTime;
        lcd.setCursor(0,1);
        lcd.print("Feed Table Opened   ");
        lcd.setCursor(5,2);
        lcd.print(y[0]);
        lcd.print("    ");
        Serial.print("SEQ 1 | Running at: ");
        Serial.print(y[0]);
        Serial.print("  |  Time: ");
        Serial.println(currentTime);
        digitalWrite(Relay1, HIGH);
        digitalWrite(Relay2, LOW);
        a = 2;
      }
      if (a==2){
        setLED(Led2);
      }
      if ((a == 2) && (currentTime - previousTimer >= y[1])){
        previousTimer = currentTime;
        lcd.setCursor(0,1);
        lcd.print("Feed Table Closed   ");
        lcd.setCursor(5,2);
        lcd.print(y[1]);
        lcd.print("    ");
        Serial.print("SEQ 2 | Running at: ");
        Serial.print(y[1]);
        Serial.print("  |  Time: ");
        Serial.println(currentTime);
        digitalWrite(Relay2, HIGH);
        digitalWrite(Relay1, LOW);
        a = 1;
      }
      if (b==1){
        setLED(Led3);
      }
      if ((b == 1) && (currentTime - previousTimer2 >= y[2])){
        previousTimer2 = currentTime;
        lcd.setCursor(0,1);
        lcd.print("Hook Head Wait      ");
        lcd.setCursor(5,2);
        lcd.print(y[2]);
        lcd.print("     ");
        Serial.print("SEQ 3 | Running at: ");
        Serial.print(y[2]);
        Serial.print("  |  Time: ");
        Serial.println(currentTime);
        digitalWrite(Relay3, HIGH);
        digitalWrite(Relay4, LOW);
        digitalWrite(Relay5, LOW);
        b = 2;
      }
      if (b==2){
        setLED(Led4);
      }
      if ((b == 2) && (currentTime - previousTimer2 >= y[3])){
        previousTimer2 = currentTime;
        lcd.setCursor(0,1);
        lcd.print("Crimp Wait          ");
        lcd.setCursor(5,2);
        lcd.print(y[3]);
        lcd.print("     ");
        Serial.print("SEQ 4 | Running at: ");
        Serial.print(y[3]);
        Serial.print("  |  Time: ");
        Serial.println(currentTime);
        digitalWrite(Relay4, HIGH);
        digitalWrite(Relay3, LOW);
        digitalWrite(Relay5, LOW);
        b = 3;
      }
      if (b==3){
        setLED(Led5);
      }
      if ((b == 3) && (currentTime - previousTimer2 >= y[4])){
        Bcheck = digitalRead(SensorB);
        if (Bcheck == LOW){
        previousTimer2 = currentTime;
        lcd.setCursor(0,1);
        lcd.print("Crimp Time Activated");
        lcd.setCursor(5,2);
        lcd.print(y[4]);
        lcd.print("     ");
        Serial.print("SEQ 5 | Running at: ");
        Serial.print(y[4]);
        Serial.print("  |  Time: ");
        Serial.println(currentTime);
        digitalWrite(Relay5, HIGH);
        digitalWrite(Relay3, LOW);
        digitalWrite(Relay4, LOW);
        b = 1;
        }
      }
    }
      else {
        digitalWrite(ErrorLed, HIGH);
        digitalWrite(Relay1, LOW);
        digitalWrite(Relay2, LOW);
        digitalWrite(Relay3, LOW);
        digitalWrite(Relay4, LOW);
        digitalWrite(Relay5, LOW);
        if (y[5] == passcode){
              Serial.println("***** Override ACTIVATED *****");
              y[5]=0;
              SOverride = 2;
        }
        switch (x){
          case 0:
            setLEDS(Led1);
            lcd.setCursor(0,1);
            lcd.print("Feed Wait Time:     ");
            changetime(x);
            break;
          case 1:
            setLEDS(Led2);
            lcd.setCursor(0,1);
            lcd.print("Feed Open Time      ");
            changetime(x);
            break;
          case 2:
            setLEDS(Led3);
            lcd.setCursor(0,1);
            lcd.print("Hook Cycle Wait     ");
            changetime(x);
            break;
          case 3:
            setLEDS(Led4);
            lcd.setCursor(0,1);
            lcd.print("Crimp Cycle Wait    ");
            changetime(x);
            break;
          case 4:
            setLEDS(Led5);
            lcd.setCursor(0,1);
            lcd.print("Crimp Time          ");
            changetime(x);
            break;
        } //END OF MAIN SWITCH
      } // End of Else (containing switch)
  } // End of MAIN while statement
  if (SOverride == 2){
    digitalWrite(Led1,HIGH);
    digitalWrite(Led2,HIGH);
    digitalWrite(Led3,HIGH);
    digitalWrite(Led4,HIGH);
    digitalWrite(Led5,HIGH);
    lcd.setCursor(0,1);
    lcd.print("OVERRIDE: ON        ");
    BNextLogic = digitalRead(NextButton);
    if ((BNextLogic == HIGH) && (currentTime - buttonPreviousTime >= buttonWait)){
      buttonPreviousTime = currentTime;
      rswitch++;
      if (rswitch >= 5){
        rswitch = 0;
      }
    }
    SaveButtonTrigger = digitalRead(SaveButton);
    if ((SaveButtonTrigger == HIGH) && (currentTime - buttonPreviousTime >= buttonWait)){
      buttonPreviousTime = currentTime;
      Override_Trigger(rswitch+1);
    }
    BDownLogic = digitalRead(DownButton);
    if ((BDownLogic == HIGH) && (currentTime - buttonPreviousTime >= buttonWait)){
      buttonPreviousTime = currentTime;
      lcd.setCursor(0,3);
      lcd.print("Override Deactivated");
      Serial.println("SYSTEM OVERRIDE | Deactivated ");
      preLCDClear = currentTime;
      SOverride = 0;
      x=0;
    }
    else {
    char key;
    key = keypad.getKey();
    if(key){
      char bxyz[] = {0};
      bxyz[j++] = key;
      bxyz[j];
      int tempb = atoi(bxyz);
      Override_Trigger(tempb);
      j = 0;
    }
      switch(rswitch){
        case 0:
        lcd.setCursor(0,2);
        lcd.print("SYSTEM: Relay 1    ");
        break;
        case 1:
        lcd.setCursor(0,2);
        lcd.print("SYSTEM: Relay 2    ");
        break;
        case 2:
        lcd.setCursor(0,2);
        lcd.print("SYSTEM: Relay 3    ");
        break;
        case 3:
        lcd.setCursor(0,2);
        lcd.print("SYSTEM: Relay 4    ");
        break;
        case 4:
        lcd.setCursor(0,2);
        lcd.print("SYSTEM: Relay 5    ");
        break;
        case 5:
        break;
      }
    }
  }
} // End of LOOP Void
void savetrigger(int x){
  int address = 0;
  address = x;
  int ytemp = 0;
  ytemp = y[x]/10;
  /*     ************ UN COMMENT BEFORE FINAL RELEASE ****************** */
  EEPROM.update(address,ytemp);
  address = address + 1;
  if (address == EEPROM.length()){
    address = 0;
  }
  ytemp=x+1;
  lcd.setCursor(0,3);
  lcd.print("EE.Update VAR[");
  lcd.print(ytemp);
  lcd.print("]    ");
  unsigned long currentTime = millis();
  preLCDClear = currentTime;
int state = digitalRead(ErrorLed);
    digitalWrite(ErrorLed, HIGH);
    delay(200);
    digitalWrite(ErrorLed, LOW);
    delay(200);
    digitalWrite(ErrorLed, HIGH);
    delay(200);
    digitalWrite(ErrorLed, LOW);
    delay(200);
    digitalWrite(ErrorLed, state);
}
void Override_Trigger(int RTrigger){
  int tempstate = LOW;
  String lcdstate = "OFF";
  unsigned long currentTime = millis();
  if (StateArray[RTrigger] == 1){
    tempstate = LOW;
    lcdstate = "OFF";
    StateArray[RTrigger] = 0;
  }
  else
  {
    StateArray[RTrigger] = 1;
    lcdstate = "ON";
    tempstate = HIGH;
  }
  if (RTrigger == 1){
    digitalWrite(Relay1, tempstate);
    lcd.setCursor(0,3);
    lcd.print("Relay 1 SET TO: ");
    lcd.print(lcdstate);
    lcd.print(" ");
    Serial.print("SYSTEM OVERRIDE | Relay 1 | ");
    Serial.println(lcdstate);
    preLCDClear = currentTime;
  }
  if (RTrigger == 2){
    digitalWrite(Relay2, tempstate);
    lcd.setCursor(0,3);
    lcd.print("Relay 2 SET TO: ");
    lcd.print(lcdstate);
    lcd.print(" ");
    Serial.print("SYSTEM OVERRIDE | Relay 2 | ");
    Serial.println(lcdstate);
    preLCDClear = currentTime;
  }
  if (RTrigger == 3){
    digitalWrite(Relay3, tempstate);
    lcd.setCursor(0,3);
    lcd.print("Relay 3 SET TO: ");
    lcd.print(lcdstate);
    lcd.print(" ");
    Serial.print("SYSTEM OVERRIDE | Relay 3 | ");
    Serial.println(lcdstate);
    preLCDClear = currentTime;
  }
  if (RTrigger == 4){
    digitalWrite(Relay4, tempstate);
    lcd.setCursor(0,3);
    lcd.print("Relay 4 SET TO: ");
    lcd.print(lcdstate);
    lcd.print(" ");
    Serial.print("SYSTEM OVERRIDE | Relay 4 | ");
    Serial.println(lcdstate);
    preLCDClear = currentTime;
  }
  if (RTrigger == 5){
    digitalWrite(Relay5, tempstate);
    lcd.setCursor(0,3);
    lcd.print("Relay 5 SET TO: ");
    lcd.print(lcdstate);
    lcd.print(" ");
    Serial.print("SYSTEM OVERRIDE | Relay 5 | ");
    Serial.println(lcdstate);
    preLCDClear = currentTime;
  }
  else{
  }
}
void changetime(int x){
  lcd.setCursor(5,2);
  lcd.print(y[x]);
  lcd.print("       ");
  lcd.setCursor(pos,2);
  char key;
  key = keypad.getKey();
  if(key){
    lcd.print(key);
    pos++;
    lcd.setCursor(pos,2);
    arraya[j++] = key;
    arraya[j];
    if (pos > 20){
      pos = 15;
    }
    if(key=='*'){
      int tempa = atoi(arraya);
      Serial.print("SYSTEM | Keypad Input: ");
      Serial.println(tempa);
      if (tempa == passcode){
        y[5]= passcode;
        pos = 15;
        lcd.setCursor(pos,2);
        lcd.print("       ");
        j = 0;
        return;
      }
      if (tempa > 2550){
        tempa = 2550;
        Serial.println("WARNING: MAX VALUE HIT");
        lcd.setCursor(0,3);
        lcd.print("ERROR: MAX VALUE HIT");
        unsigned long currentTime = millis();
        preLCDClear = currentTime;
      }
      y[x]=tempa;
      int ytemp = 0;
      int address = 0;
      ytemp = y[x]/10;
      address = x;
      /*EEPROM.update(address, ytemp);
      address = address + 1;
      if (address == EEPROM.length()){
        address = 0;
      }*/
      Serial.print("EEPROM | ");
      Serial.print(ytemp);
      Serial.print(" was wrote to EEPROM address: ");
      Serial.println(x);
      pos = 15;
      lcd.setCursor(pos,2);
      lcd.print("       ");
      j = 0;
      return;
    }
    if(key=='#'){
      pos = 15;
      lcd.setCursor(pos,2);
      lcd.print("       ");
      j = 0;
      return;
    }
  } //End of If(Key)
} //End of ChangeTime Void
void lcdClear(){
  unsigned long currentTime = millis();
  if(currentTime - preLCDClear >= LCDClearTime)
  {
    preLCDClear = currentTime;
    lcd.setCursor(0,3);
    lcd.print("                    ");
  }
}
void setLEDS(byte LEDSnumber)
{
  digitalWrite(Led1, LOW);
  digitalWrite(Led2, LOW);
  digitalWrite(Led3, LOW);
  digitalWrite(Led4, LOW);
  digitalWrite(Led5, LOW);
  
  digitalWrite(LEDSnumber, HIGH);
}
void setLED(byte LEDnumber)
{
  if (LEDnumber == Led3 || LEDnumber == Led4 || LEDnumber == Led5){
    digitalWrite(Led3, LOW);
    digitalWrite(Led4, LOW);
    digitalWrite(Led5, LOW);
    
    digitalWrite(LEDnumber, HIGH);
  }
  if (LEDnumber == Led1 || LEDnumber == Led2) {
    digitalWrite(Led1, LOW);
    digitalWrite(Led2, LOW);

    digitalWrite(LEDnumber, HIGH);
  }
}
